////////////////////////////////////////////////////////////////////////////////
//                                                                              
//                StarUML - The Open Source UML/MDA Platform.                   
//                                                                              
//              Copyright (C) 2002-2005 - Plastic Software, Inc.                
//                                                                              
//                                                                              
// This program is free software; you can redistribute it and/or modify it      
// under the terms of the GNU General Public License as published by the Free   
// Software Foundation; either version 2 of the License, or (at your option)    
// any later version.                                                           
//                                                                              
// This program is distributed in the hope that it will be useful, but WITHOUT  
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for     
// more details.                                                                
//                                                                              
// You should have received a copy of the GNU General Public License along with 
// this program; if not, write to the Free Software Foundation, Inc., 51        
// Franklin St, Fifth Floor, Boston, MA 02110-1301 USA                          
//                                                                              
// Linking StarUML statically or dynamically with other modules is making a     
// combined work based on StarUML. Thus, the terms and conditions of the GNU    
// General Public License cover the whole combination.                          
//                                                                              
// In addition, as a special exception, Plastic Software give you permission to 
// combine StarUML program with free software programs or libraries that are    
// released under the GNU LGPL/Mozilla/Apache/BSD and with code included in the 
// standard release of ExpressBar, ExpressNavBar, ExpressInspector,             
// ExpressPageControl, ProGrammar, NextGrid under the commercial license (or    
// modified versions of such code, with unchanged license). You may copy and    
// distribute such a system following the terms of the GNU GPL for StarUML and  
// the licenses of the other code concerned, provided that you include the      
// source code of that other code when and as the GNU GPL requires distribution 
// of source code. Plastic Software also give you permission to combine StarUML 
// program with dynamically linking plug-in (or add-in) programs that are       
// released under the GPL-incompatible and proprietary license.                 
//                                                                              
// Note that people who make modified versions of StarUML are not obligated to  
// grant this special exception for their modified versions; it is their choice 
// whether to do so. The GNU General Public License gives permission to release 
// a modified version without this exception; this exception also makes it      
// possible to release a modified version which carries forward this exception. 
////////////////////////////////////////////////////////////////////////////////

(notation
  (onarrange
    (mofsetattr view 'StereotypeDisplay' 'sdkNone')
    (mofsetattr view 'SuppressOperations' true)
    (mofsetattr view 'ShowProperty' false)
    (mofsetattr view 'ShowOperationSignature' false)
    (mofsetattr view 'ShowCompartmentStereotype' false)
    (mofsetattr view 'ShowCompartmentVisibility' false)
    (arrangeObject view)
  )

  (ondraw
    // parent
    (set isSuperType true)

    (set c (mofcolcount model 'Associations'))
    (for i 0 (- c 1)
      (sequence
        (set assocEnd (mofcolat model 'Associations' i))
        (if (= assocEnd (mofcolat (mofref assocEnd 'Association') 'Connections' 1))
          (set isSuperType false)
          nil)
      )
    )

    // variable initialize
    (set x left)
    (set y top)
    (set space 3)
    (set w 0)

    ///////////////////////////////////////////////////////
    // draw name part
    //

    (set y (+ y space))
    (set name (mofattr model 'Name'))
    (textout x y name)
    (set w (textwidth name))
    (set y (+ y (textheight name)))
    (set y (+ y space))

    // shadow
    (setbrushcolor 'clSilver')
    (setbrushstyle 'bsSolid')
    (setpencolor 'clSilver')
    (if isSuperType
      (rect (+ x 5) (+ y 5) (+ right 5) (+ bottom 5))
      (roundrect (+ x 5) (+ y 5) (+ right 5) (+ bottom 5) 10 10))

    // outline
    (setdefaultstyle)
    (if isSuperType
      (rect x y right bottom)
      (roundrect x y right bottom 10 10))

    ///////////////////////////////////////////////////////
    // draw column part
    //

    (set x (+ x 5))
    (set y (+ y space))

    ///////////////////////////////////////////////////////
    // PK column
    //
    (set hasPKs false)
    (for i 0 (- (mofColCount model 'Attributes') 1)
      (sequence
      
        // select i-th column
        (set attr (mofColAt model 'Attributes' i))
        (set keys '')

        // column is PK?
        (if (tagVal attr 'ERD' 'column' 'PK')
          (sequence
            (if (tagVal attr 'ERD' 'column' 'FK')
              (sequence
                (setfontstyle 'fsItalic')
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'FK'))))

            (if (tagVal attr 'ERD' 'column' 'AK')
              (sequence
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'AK'))))

            (if (tagVal attr 'ERD' 'column' 'IE')
              (sequence
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'IE'))))

            (set attrName (mofAttr attr 'Name'))

            (set columnName (tagval attr 'ERD' 'column' 'ColumnName'))
            (if (!= columnName '') (set attrName (concat attrName '/ ' columnName)))

            (set type (mofattr attr 'TypeExpression'))
            (if (!= type '') (set attrName (concat attrName ': ' type)))

            (set nullOption (tagval attr 'ERD' 'column' 'NullOption'))
            (if (!= nullOption '') (set attrName (concat attrName '  ' nullOption)))
            
            (if (!= keys '')
                (set attrName (concat attrName ' (' keys ')')))

            // draw PK
            (drawbitmap x y 'primarykey.bmp' true)
            (textout (+ x 16) y attrName)
            (setdefaultstyle)
            
            // change variables
            (set hasPKs true)
            (set y (+ y (textHeight attrName)))
            (set newW (+ (textwidth attrName) 16))
            (if (> newW w) (set w newW))
          )
        )
      )
    )

    ///////////////////////////////////////////////////////
    // draw line
    //
    (if hasPKs
      (sequence
        (set y (+ y space))
        (line left y right y)
        (set y (+ y space))
      )
      (sequence
        (set y (+ y space))
        (set y (+ y (mofattr view 'FontSize')))
        (set y (+ y space))
        (line left y right y)
        (set y (+ y space))
      ))

    ///////////////////////////////////////////////////////
    // draw other column
    //
    (for i 0 (- (mofColCount model 'Attributes') 1)
      (sequence
        // select i-th column
        (set attr (mofColAt model 'Attributes' i))
        (set keys '')

        // column is not PK?
        (if (= (tagVal attr 'ERD' 'column' 'PK') false)
          (sequence
            (if (tagVal attr 'ERD' 'column' 'FK')
              (sequence
                (setfontstyle 'fsItalic')
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'FK'))))

            (if (tagVal attr 'ERD' 'column' 'AK')
              (sequence
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'AK'))))

            (if (tagVal attr 'ERD' 'column' 'IE')
              (sequence
                (if (!= keys '') (set keys (concat keys ',')))
                (set keys (concat keys 'IE'))))

            (set attrName (mofAttr attr 'Name'))

            (set columnName (tagval attr 'ERD' 'column' 'ColumnName'))
            (if (!= columnName '') (set attrName (concat attrName '/ ' columnName)))
            
            (set type (mofattr attr 'TypeExpression'))
            (if (!= type '') (set attrName (concat attrName ': ' type)))

            (set nullOption (tagval attr 'ERD' 'column' 'NullOption'))
            (if (!= nullOption '') (set attrName (concat attrName '  ' nullOption)))

            (if (!= keys '')
              (sequence
                (set attrName (concat attrName ' (' keys ')'))
                (drawbitmap x y 'keygroups.bmp' true))
              (drawbitmap x y 'column.bmp' true))
              
            // draw column
            (textout (+ x 16) y attrName)
            (setdefaultstyle)
            
            // change variables
            (set y (+ y (textHeight attrName)))
            (set newW (+ (textwidth attrName) 16))
            (if (> newW w) (set w newW))
          )
        )
      )
    )

    (set minWidth (+ w space space space))
    (set minHeight (- (+ y space space space space) Top))

  )
)


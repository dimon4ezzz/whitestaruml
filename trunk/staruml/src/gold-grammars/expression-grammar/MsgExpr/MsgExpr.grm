"Start Symbol" = <Grammar Message>
"Case Sensitive" = False                
               
! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {All Letters} +  {Number} + {Euro Sign} + [ '_' ',' ';' '/' '\' '.' '&' '@' '$' '%' '+' '#' '-' '~' '"' '`' '' ] 
! Restricted Chars should not start or end an indentifier as they may collide with other symbols 
{Restricted Chars} = {All Space} + [ '+' '#' '-' '~' ]
{Boundary String Chars} = {String Chars} - {Restricted Chars}
! -------------------------------------------------
! Terminals
! -------------------------------------------------
id = {Boundary String Chars}+ ( {Restricted Chars}+ {Boundary String Chars}+ )* ( {Restricted Chars}* '<' {String Chars}* '>'  )? 


! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Grammar Message> ::= <message_expression> 
<message_expression> ::= <stereotype_part> <recurrence_part>  <message_name_clause> <argument_part>
                           
<stereotype_part> ::= '<<' <stereotype> '>>'
                   |  <>

<stereotype> ::= id


<recurrence_part> ::= <iteration_clause_part>  <branch_clause_part>
        | <branch_clause_part>  <iteration_clause_part>
        | <iteration_clause_part>
        | <branch_clause_part> 
        | <>

<iteration_clause_part> ::= '*' '[' <iteration__branch_clause> ']'

<branch_clause_part> ::= '[' <iteration__branch_clause> ']'
                      
!<return_part> ::= <return_id> ':=' 
!               | <>

                    
<message_name_clause> ::= <message_name> 
                | <return_id> ':=' <message_name>                
                | <>
                
<message_name> ::= id

<return_id> ::= id


<argument_part> ::=  '(' <argument_string> ')'
                 |  <>
                 
<argument_string> ::= id
                    |  <>
                  
<iteration__branch_clause> ::= id 

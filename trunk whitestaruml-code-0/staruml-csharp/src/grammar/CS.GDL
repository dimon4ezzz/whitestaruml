/*************************************************************************
 *                                                                       *
 *  THIS EXAMPLE IS INTENDED FOR DEMONSTRATION PURPOSES ONLY AND         *
 *  IS PROVIDED "AS IS" WITHOUT WARRANTY EITHER EXPRESS OR IMPLIED.      *
 *                                                                       *
 *  Copyright (c) 2002 NorKen Technologies, Inc.                   	 *
 *  All rights reserved.                                                 *
 *                                                                       *
 *************************************************************************/

//  CS.GDL - C# Language Specification
//
//	Revision Date:	11/26/02
//
//  Specification:
//
// 	http://msdn.microsoft.com/library/default.asp?url=/library/en_us/csspec/html/CSharpSpecStart.asp
//
//  Start symbol(s):
//
//    compilation_unit
//

grammar CS <MATCHCASE,
	      HIDEREPEATERS,
	      HIDELITERALS,
	      SPACE = disregarded_symbol,
	      VERSION="1.0-11/26/02">
{

compilation_unit::=
	[using_directives]
	[namespace_member_declarations]
	[attributes] ;

// C.2.5 Statements

statement::=
	  labeled_statement
	| declaration_statement
	| block
	| empty_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| try_statement
	| checked_statement
	| unchecked_statement
	| lock_statement
	| using_statement
	;

block::=
	"{" [{statement_list}] "}"
	| "unsafe" block;

statement_list::=
	{statement, ","} ;

empty_statement::= ";" ;

labeled_statement::=
	cs_ident ":" statement ;

declaration_statement::=
	  local_variable_declaration ";"
	| local_constant_declaration ";" ;

local_variable_declaration::=
	type variable_declarators ;

local_constant_declaration ::=
	"const" type constant_declarators ;

constant_declarators::=
	{constant_declarator, ","};

constant_declarator::=
	cs_ident "=" constant_expression ;

expression_statement::=
	statement_expression ";" ;

statement_expression::=
	  expression
	| assignment ;

selection_statement::=
	  if_statement
	| switch_statement ;

if_statement::=
	"if" "(" boolean_expression ")"
	embedded_statement ["else" embedded_statement] ;

switch_statement::=
	"switch" "(" expression ")" switch_block ;

switch_block::=
	"{" [switch_sections] "}" ;

switch_sections::=
	{switch_section};

switch_section::=
	switch_labels [{statement_list}] ;

switch_labels::=
	{switch_label};

switch_label::=
	"case" constant_expression ":"
	| "default" ":" ;

iteration_statement::=
	  while_statement
	| do_statement
	| for_statement
	| foreach_statement ;

while_statement::=
	"while" "(" boolean_expression ")"
	embedded_statement ;

do_statement::=
	"do" embedded_statement "while"
	"(" boolean_expression ")" ";" ;

for_statement::=
	"for" "(" [for_initializer] ";"
	[for_condition] ";"
	[for_iterator] ")"
	embedded_statement ;

for_initializer::=
	  local_variable_declaration
	| statement_expression_list ;

for_condition::=
	boolean_expression ;

for_iterator::=
	statement_expression_list ;

statement_expression_list::=
	{statement_expression, ","} ;

foreach_statement::=
	"foreach"
	"(" type cs_ident "in" expression ")"
	embedded_statement ;

jump_statement::=
	  break_statement
	| continue_statement
	| goto_statement
	| return_statement
	| throw_statement ;

break_statement::=
	"break" ";" ;

continue_statement::=
	"continue" ";" ;

goto_statement::=
	"goto"
	(   cs_ident
	  | "case" constant_expression
	  | "default" )
	";" ;

return_statement::=
	"return" [expression] ";" ;

throw_statement::=
	"throw" [expression] ";" ;

try_statement::=
	"try" block
	(catch_clauses [finally_clause] | finally_clause);

catch_clauses::=
	  specific_catch_clauses [general_catch_clause]
	| [specific_catch_clauses] general_catch_clause ;

specific_catch_clauses::=
	{specific_catch_clause} ;

specific_catch_clause::=
	"catch" "(" class_type [cs_ident] ")" block ;

general_catch_clause::=
	"catch" block ;

finally_clause::=
	"finally" block ;

checked_statement::=
	"checked" block ;

unchecked_statement::=
	"unchecked" block ;

lock_statement::=
	"lock" "(" expression ")"
	embedded_statement ;

using_statement::=
	"using" "(" resource_acquisition ")"
	embedded_statement ;

resource_acquisition::=
	  local_variable_declaration
	| expression ;

namespace_declaration::=
	"namespace" qualified_identifier
	namespace_body [";"] ;

qualified_identifier::=
	{cs_ident, "."};

namespace_body::=
	"{" [using_directives]
	  [namespace_member_declarations] "}" ;

using_directives::=
	{using_directive};

using_directive::=
	  using_namespace_directive
	| using_alias_directive ;

using_alias_directive::=
	"using" cs_ident "="
	namespace_or_type_name ";" ;

using_namespace_directive::=
	"using" namespace_name ";" ;

namespace_member_declarations::=
	{namespace_member_declaration} ;

namespace_member_declaration::=
	  namespace_declaration
	| type_declaration ;

type_declaration::=
	[Attributes] (
	  class_declaration
	| struct_declaration
	| interface_declaration
	| enum_declaration
	| delegate_declaration ) ;


// C.2.6 Classes

class_declaration::=
	[class_modifiers]
	"class" cs_ident [class_base]
	class_body [";"] ;

class_modifiers::=
	{class_modifier} ;

class_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "abstract"
	| "sealed"
	| "unsafe" ;

class_base::=
	  ":" class_type
	| ":" interface_type_list
	| ":" class_type "," interface_type_list ";" ;

interface_type_list::=
	{interface_type, ","} ;

class_body::=
	"{" [class_member_declarations] "}" ;

class_member_declarations::=
	{class_member_declaration} ;

class_member_declaration::=
	[attributes] (
		  constant_declaration
		| field_declaration
		| method_declaration
		| property_declaration
		| event_declaration
		| indexer_declaration
		| operator_declaration
		| constructor_declaration
		| destructor_declaration
		| static_constructor_declaration
		| type_declaration
	) ;

constant_declaration::=
	[constant_modifiers]
	"const" type constant_declarators ";" ;

constant_modifiers::=
	{constant_modifier} ;

constant_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	;

field_declaration::=
	[field_modifiers]
	type variable_declarators ";" ;

field_modifiers::=
	{field_modifier} ;

field_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "static"
	| "readonly"
	| "unsafe"
	;

variable_declarators::=
	{variable_declarator, ","};

variable_declarator::=
	cs_ident ["=" variable_initializer] ;

variable_initializer::=
	  expression
	| array_initializer ;

method_declaration::=
	method_header method_body ;

method_header::=
	[method_modifiers]
	return_type
	member_name
	"(" [formal_parameter_list] ")" ;

method_modifiers::=
	{method_modifier} ;

method_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "static"
	| "virtual"
	| "sealed"
	| "override"
	| "abstract"
	| "extern"
	| "unsafe"
	;

return_type::=
	  type
	| "void " ;

member_name::=
	qualified_identifier ;

method_body::=
	  block
	| ";" ;

formal_parameter_list ::=
	  fixed_parameters ["," parameter_array]
	| parameter_array ;

fixed_parameters::=
	{fixed_parameter, ","} ;

fixed_parameter::=
	[attributes]
	[parameter_modifier]
	type cs_ident ;

parameter_modifier::=
	  "ref"
	| "out" ;

parameter_array::=
	[attributes]
	"params"
	type cs_ident ;

property_declaration::=
	[property_modifiers]
	type member_name
	"{" accessor_declarations "}" ;

property_modifiers::=
	{property_modifier} ;

property_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "static"
	| "virtual"
	| "sealed"
	| "override"
	| "abstract"
	| "extern"
	| "unsafe" ;

accessor_declarations::=
	[attributes]
	(
	   get_accessor_declaration [set_accessor_declaration]
	 | set_accessor_declaration [get_accessor_declaration]
	) ;

get_accessor_declaration::=
	"get" accessor_body ;

set_accessor_declaration::=
	"set" accessor_body ;

accessor_body::=
	block
	| ";" ;

event_declaration::=
	[event_modifiers]
	"event" type
	(variable_declarators ";"
	  | member_name "{" event_accessor_declarations "}" );

event_modifiers::=
	{event_modifier} ;

event_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "static"
	| "virtual"
	| "sealed"
	| "override"
	| "abstract"
	| "extern"
	| "unsafe" ;

event_accessor_declarations::=
	  add_accessor_declaration remove_accessor_declaration
	| remove_accessor_declaration add_accessor_declaration ;

add_accessor_declaration::=
	[attributes]
	"add" block ;

remove_accessor_declaration::=
	[attributes]
	"remove" block ;

indexer_declaration::=
	[indexer_modifiers]
	indexer_declarator
	"{" accessor_declarations "}" ;

indexer_modifiers::=
	{indexer_modifier} ;

indexer_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "static"
	| "virtual"
	| "sealed"
	| "override"
	| "abstract"
	| "unsafe" ;

indexer_declarator::=
	type
	[interface_type "."]
	"this"
	"[" formal_parameter_list "]" ;

operator_declaration::=
	operator_modifiers
	operator_declarator
	operator_body ;

operator_modifiers::=
	{operator_modifier} ;

operator_modifier::=
	  "public"
	| "static"
	| "extern"
	| "unsafe" ;

operator_declarator::=
	  unary_operator_declarator
	| binary_operator_declarator
	| conversion_operator_declarator ;

unary_operator_declarator::=
	type "operator"
	overloadable_unary_operator
	"(" operator_parameters ")" ;

overloadable_unary_operator::=
	"+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;

binary_operator_declarator::=
	type "operator"
	overloadable_binary_operator
	"(" operator_parameters ")" ;

overloadable_binary_operator::=
	"+" | "-" | "*" | "/" | "%" | "&" |
	"|" | "^" | "<<" | ">>" | "==" | "!=" |
	">" | "<" | ">=" | "<=" ;

conversion_operator_declarator::=
	conversion_operator_type
	"operator" type
	"(" operator_parameters ")" ;

conversion_operator_type ::=
	  "implicit"
	| "explicit" ;

operator_parameters ::=
	{operator_parameter, ","} ;

operator_parameter ::=
	type parameter_name ;

parameter_name ::=
	cs_ident;


constructor_declaration::=
	[constructor_modifiers]
	constructor_declarator
	constructor_body ;

constructor_modifiers::=
	{constructor_modifier} ;

constructor_modifier::=
	  "public"
	| "protected"
	| "internal"
	| "private"
	| "extern"
	| "unsafe" ;

constructor_declarator::=
	cs_ident
	"(" [formal_parameter_list] ")"
	[constructor_initializer] ;

constructor_initializer::=
	":" ("base" | "this")
	"(" [argument_list] ")" ;

static_constructor_declaration::=
	["unsafe"] "static"
	cs_ident "(" ")"
	block ;

constructor_body ::=
	block
	| ";" ;

destructor_declaration::=
	["unsafe"]
	"~" cs_ident "(" ")"
	constructor_body;

operator_body::=
	block
	| ";" ;

// C.2.7 Structs

struct_declaration::=
	[struct_modifiers]
	"struct" cs_ident
	[struct_interfaces]
	struct_body [";"] ;

struct_modifiers::=
	{struct_modifier} ;

struct_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "unsafe" ;

struct_interfaces::=
	":" interface_type_list ;

struct_body::=
	"{" [struct_member_declarations] "}" ;

struct_member_declarations::=
	{struct_member_declaration} ;

struct_member_declaration::=
	[Attributes](
	  constant_declaration
	| field_declaration
	| method_declaration
	| property_declaration
	| event_declaration
	| indexer_declaration
	| operator_declaration
	| constructor_declaration
	| static_constructor_declaration
	| type_declaration 
	);

// C.2.8 Arrays

array_initializer::=
	"{" [variable_initializer_list [","]] "}" ;

variable_initializer_list::=
	{variable_initializer, ","} ;

// C.2.9 Interfaces

interface_declaration::=
	[interface_modifiers]
	"interface" cs_ident
	[interface_base]
	interface_body [";"] ;

interface_modifiers::=
	{interface_modifier} ;

interface_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "unsafe" ;

interface_base ::=
	":" interface_type_list ;

interface_body::=
	"{" [interface_member_declarations] "}" ;

interface_member_declarations::=
	{interface_member_declaration} ;

interface_member_declaration ::=
	[attributes]
	(
	  interface_method_declaration
	| interface_property_declaration
	| interface_event_declaration
	| interface_indexer_declaration
	) ;

interface_method_declaration::=
	["new"] return_type cs_ident
	"(" [formal_parameter_list] ")"
	(";" | "{" "}") ;

interface_property_declaration::=
	["new"] type cs_ident
	"{" interface_accessors "}" ;

interface_accessors ::=
	[attributes]
	{get_accessor | set_accessor} ;

get_accessor ::=
	"get" (";" | "{" "}" ) ;

set_accessor ::=
	"set" (";" | "{" "}" ) ;

interface_event_declaration::=
	["new"] "event"
	type cs_ident ";" ;

interface_indexer_declaration::=
	["new"] type "this"
	"[" formal_parameter_list "]"
	"{" interface_accessors "}" ;

// C.2.10 Enums

enum_declaration::=
	[enum_modifiers]
	"enum" cs_ident
	[enum_base] enum_body [";"] ;

enum_base::=
	":" integral_type ;

enum_body::=
	"{" [enum_member_declarations [","]] "}" ;

enum_modifiers::=
	{enum_modifier} ;

enum_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "unsafe" ;

enum_member_declarations::=
	{enum_member_declaration, ","} ;

enum_member_declaration::=
	cs_ident
	["=" constant_expression] ;

// C.2.11 Delegates

delegate_declaration::=
	[delegate_modifiers]
	"delegate" return_type cs_ident
	"(" [formal_parameter_list] ")" ";" ;

delegate_modifiers::=
	{delegate_modifier} ;

delegate_modifier::=
	  "new"
	| "public"
	| "protected"
	| "internal"
	| "private"
	| "unsafe" ;

// C.2.12 Attributes

attributes::=
	attribute_sections ;

attribute_sections::=
	{attribute_section} ;

attribute_section::=
	"[" [attribute_target_specifier]
	   attribute_list [","] "]" ;

attribute_target_specifier::=
	attribute_target ":" ;

attribute_target::=
	  "assembly"
	| "field"
	| "event"
	| "method"
	| "module"
	| "param"
	| "property"
	| "return"
	| "type" ;

attribute_list::=
	{attribute, ","} ;

attribute::=
	attribute_name [attribute_arguments] ;

attribute_name::=
	type_name
	| ("in"|"out")
	;

attribute_arguments::=
	  "(" [positional_argument_list
	  ["," named_argument_list]] ")"
	| "(" named_argument_list ")" ;


positional_argument_list::=
	{positional_argument, ","} ;

positional_argument::=
	attribute_argument_expression ;

named_argument_list::=
	{named_argument, ","} ;

named_argument::=
	cs_ident "=" attribute_argument_expression ;

attribute_argument_expression::=
	expression ;


// C.2 Syntactic grammar

// C.2.1 Basic concepts

namespace_name::=
	namespace_or_type_name ;

type_name::=
	namespace_or_type_name ;

namespace_or_type_name::=
	{cs_ident, "."};

// C.2.2 Types

type ::=
	( value_type
  	| class_type
	| interface_type
	| delegate_type
	| "void"
	)
	[{pointer_tag | rank_specifiers}] ;

pointer_tag ::= "*" ;

value_type::=
	  struct_type
	| enum_type ;

struct_type::=
	  type_name
	| simple_type ;

simple_type::=
	  numeric_type
	| "bool" ;

numeric_type::=
	  integral_type
	| floating_point_type
	| "decimal" ;

integral_type::=
	  "sbyte"
	| "byte"
	| "short"
	| "ushort"
	| "int"
	| "uint"
	| "long"
	| "ulong"
	| "char"
	;

floating_point_type::=
	  "float"
	| "double" ;

enum_type::=
	type_name ;

class_type::=
	  type_name
	| "object"
	| "string" ;

interface_type::=
	type_name ;

rank_specifiers::=
	{rank_specifier};

rank_specifier::=
	"[" [dim_separators] "]" ;

dim_separators::=
	{","} ;

delegate_type::=
	type_name ;

// C.2.3 Variables

variable_reference::=
	expression  ;

// C.2.4 Expressions

argument_list::=
	{argument, ","} ;

argument::=
	  expression
	| "ref" variable_reference
	| "out" variable_reference
	;

primary_expression ::=
	(
	  array_creation_expression
	| literal
	| simple_name
	| parenthesized_expression
	| this_access
	| base_access
	| new_expression
	| typeof_expression
	| sizeof_expression
	| checked_expression
	| unchecked_expression
	| sizeof_expression
	| predefined_type member_access_operator
	  // constraint: should not be followed by post_expression_operator
	)
	[post_expression_operator_list] ;

post_expression_operator_list ::=
	{post_expression_operator} ;

post_expression_operator ::=
	  post_increment_operator
	| post_decrement_operator
	| member_access_operator
	| invocation_operator
	| element_access_operator
	| pointer_member_access_operator
	| pointer_element_access_operator
	;

/* primary_expression */
post_increment_operator ::=
	"++" ;

post_decrement_operator ::=
	"--" ;

member_access_operator ::=
	"." cs_ident ;

invocation_operator ::=
	"(" [argument_list] ")" ;

element_access_operator ::=
	"[" expression_list "]" ;

pointer_member_access_operator ::=
	"->" cs_ident ;

pointer_element_access_operator ::=
	"[" expression "]" ;

simple_name::=
	cs_ident ;

parenthesized_expression::=
	"(" expression ")" ;

predefined_type::=
	"bool"  | "byte"   | "char" | "decimal" | "double" |
	"float" | "int"    | "long" | "object"  | "sbyte"  |
	"short" | "string" | "uint" | "ulong"   | "ushort" ;

expression_list::=
	{expression, ","} ;

this_access::=
	"this" ;

base_access::=
	  "base" "." cs_ident
	| "base" "[" expression_list "]" ;




new_expression::=
	  object_creation_expression
	| array_creation_expression
	| delegate_creation_expression ;

object_creation_expression::=
	"new" type "(" [argument_list] ")" ;

array_creation_expression::=
	  "new" type ["[" expression_list "]"]
	[rank_specifiers] [array_initializer] ;

delegate_creation_expression::=
	"new" delegate_type "(" expression ")" ;

typeof_expression::=
	"typeof" "(" type ")"
	| "typeof" "(" "void" ")" ;

checked_expression::=
	"checked" "(" expression ")" ;

unchecked_expression::=
	"unchecked" "(" expression ")" ;

unary_expression::=
	  cast_expression
	| pointer_indirection_expression
	| addressof_expression
	| unary_operator unary_expression
	| pre_increment_expression
	| pre_decrement_expression
	| primary_expression
	;

unary_operator ::=
	"+" | "-" | "!" | "~" | "*" ;

pre_increment_expression::=
	"++" unary_expression ;

pre_decrement_expression::=
	"--" unary_expression ;

cast_expression::=
	"(" type ")" unary_expression ;

multiplicative_expression ::=
	{unary_expression, multiplicative_operator};

multiplicative_operator ::=
	"*" | "/" | "%" ;

additive_expression::=
	{multiplicative_expression, additive_operator} ;

additive_operator ::=
	("+" | "-") ^"=" ;

shift_expression::=
	{additive_expression, shift_operator} ;

shift_operator ::=
	"<<" | ">>" ;

relational_expression::=
	shift_expression
	[{ ("<" | ">" | "<=" | ">=")
	 shift_expression | ("is" | "as") type }] ;

equality_expression::=
	{relational_expression, equality_operator} ;

equality_operator ::=
	"==" | "!=" ;

and_expression::=
	{equality_expression, and_operator} ;

and_operator ::=
	"&" ;

exclusive_or_expression::=

	{and_expression, exclusive_or_operator} ;

exclusive_or_operator ::=
	"^" ;

inclusive_or_expression::=
	{exclusive_or_expression, inclusive_or_operator};

inclusive_or_operator ::=
	"|" ;

conditional_and_expression::=
	{inclusive_or_expression, conditional_and_operator};

conditional_and_operator ::=
	"&&" ;

conditional_or_expression::=
	{conditional_and_expression, conditional_or_operator};

conditional_or_operator ::=
	"||" ;

conditional_expression::=
	  conditional_or_expression ["?" expression ":" expression] ;

assignment::=
	unary_expression assignment_operator expression ;

assignment_operator ::=
	"="  | "+=" | "-=" | "*=" | "/="  |
	"%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;

expression::=
	  conditional_expression [assignment_clause] ;

assignment_clause ::=
	assignment_operator /*"="*/ expression ;

constant_expression::=
	expression ;

boolean_expression::=
	expression ;

// C.3 Grammar extensions for unsafe code

// C.3.1 Unsafe contexts

embedded_statement::=
	  statement
	| unsafe_statement
	| fixed_statement
	;

unsafe_statement::=
	"unsafe" block ;

// C.3.1.1 Pointer types

// C.3.1.3 Pointer indirection

pointer_indirection_expression ::=
	"*" unary_expression ;


// C.3.1.5 The address_of operator

addressof_expression::=
	"&" unary_expression ;

// C.3.1.6 The sizeof operator

sizeof_expression::=
	"sizeof" "(" type ")" ;


// C.3.1.7 The fixed statement

fixed_statement::=
	"fixed" "(" type fixed_pointer_declarators ")"
	embedded_statement ;


fixed_pointer_declarators::=
	{fixed_pointer_declarator, ","} ;

fixed_pointer_declarator::=
	cs_ident "=" fixed_pointer_initializer ;

fixed_pointer_initializer::=
	 "&" variable_reference
	| expression [variable_initializer ":"]
	| array_initializer
	| stackalloc_initializer ;

// C.3.1.8 Stack allocation

stackalloc_initializer::=
	"stackalloc" type "[" expression "]" ;



// C.1.8 Literals
literal::=
	  boolean_literal
	| real_literal
	| integer_literal
	| character_literal
	| string_literal
	| verbatim_string_literal
	| null_literal ;

boolean_literal::=
	  "true"
	| "false" ;

integer_literal::=
	  hexadecimal_integer_literal
	| decimal_integer_literal ;

decimal_integer_literal::=
	decimal_digits [integer_type_suffix] ;

decimal_digits::= numeric;

integer_type_suffix::=
	"U" | "u" | "L" | "l" | "UL" | "Ul" |
	"uL" | "ul" | "LU" | "Lu" | "lU" | "lu" ;

hexadecimal_integer_literal::=
	'0[xX]' hex_digits [integer_type_suffix] ;

hex_digits ::=
	'[0-9a-fA-F]+';

real_literal::=
	  decimal_digits "." decimal_digits [exponent_part] [real_type_suffix]
	| "." decimal_digits [exponent_part] [real_type_suffix]
	| decimal_digits exponent_part [real_type_suffix]
	| decimal_digits real_type_suffix ;

exponent_part::=
	("e"|"E") [sign] decimal_digits ;

sign ::= "+" |"-" ;

real_type_suffix ::=
	'[fdmFDM]' ;

character_literal <SPACE=""> ::=
	"'"  character "'" ;

character::=
	  single_character
	| simple_escape_sequence
	| hexadecimal_escape_sequence
	;

single_character::=
	'[^\\\n]' ;
	// Any character except ' (U+0027), \ (U+005C), and new_line_character

simple_escape_sequence::=
	'\\[\'\"\\0abfnrtv]' ;

hexadecimal_escape_sequence::=
	"\x" hex_digits<1,4> ;

// string_literal is a quote-enclosed string
string_literal<TERMINAL, SPACE=""> ::=
	{text_segment, [whitespace]} ;

	text_segment ::= "\"" text_elem [more_text_elems] "\"" ;
	text_elem  ::= *('[\\\"\r\n]');
	more_text_elems ::= ('\\.'|"\"\""|"\\\r\n") text_elem [more_text_elems] ;

verbatim_string_literal<SPACE=""> ::=
	[verbatim_marker]
	{verbatim_text_segment, [whitespace]} ;

	verbatim_marker ::= "@";
	verbatim_text_segment ::= "\"" verbatim_text_elem [verbatim_more_text_elems] "\"" ;
	verbatim_text_elem<TERMINAL>  ::= *('[\"]');
	verbatim_more_text_elems ::= quote_escape_seq verbatim_text_elem [verbatim_more_text_elems] ;
	quote_escape_seq<TERMINAL> ::= "\"\"" ;

null_literal::=
	"null";

// C.1.9 Operators and punctuators

operator_or_punctuator::=
	"{" | "}" | "[" | "]" | "(" | ")" | "." | "," | ":" | ";" |
	"+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "!" | "~" |
	"=" | "<" | ">" | "?" | "++"| "--"| "&&" | "||" | "<<" | ">>" |
	"==" | "!=" | "<=" | ">=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" |
	"|=" | "^=" | "<<=" | ">>=" | "->" ;

// C.1.10 Pre-processing directives

// use the space_symbol to skip comments
disregarded_symbol ::=
    { space_symbol
    | line_comment
    | block_comment, 0};

space_symbol <TERMINAL, HIDDEN> ::=
    "\32" | "\r" | "\n" | "\t" | "\12" | "\\" "\r" |pp_directive;

line_comment <TERMINAL, HIDDEN> ::=
    "//" *("\n"|"\r") ["\n"];

block_comment <TERMINAL> ::=
    "/*" *("*/") "*/";
pp_directive <SPACE=" \t\r"> ::=
	"#" *("\n"|"\r") ["\n"] ;

// C.1.7 Keywords
keyword ::=
	"abstract" | "as" |   "base" |  "bool" |  "break" |
	"byte" |   "case" |  "catch"  | "char"  | "checked" |
	"class"  | "const"  | "continue" | "decimal" | "default" |
	"delegate" | "do"  |  "double"  | "else"  | "enum" |
	"event"  | "explicit" | "extern" | "false"  | "finally" |
	"fixed"  | "float"  | "for" |  "foreach" | "goto" |
	"if"  |  "implicit"  |"in"  |  "int"  | "interface" |
	"internal" | "is"  |  "lock" |  "long"  | "namespace" |
	"new"  | "null"  | "object" | "operator" | "out" |
	"override" | "params" |  "private" | "protected" | "public" |
	"readonly" | "ref"  | "return" | "sbyte"  | "sealed" |
	"short"  | "sizeof" | "stackalloc" | "static" | "string" |
	"struct" | "switch" | "this"  | "throw" |  "true" |
	"try"  | "typeof" | "uint" |  "ulong"  | "unchecked" |
	"unsafe" | "ushort" | "using"  | "virtual" | "void" |
	"volatile" | "while" ;

cs_ident<TERMINAL> ::=
	identifier (? #value !::= keyword; );

};


/*************************************************************************
 *                                                                       *
 *  THIS EXAMPLE IS INTENDED FOR DEMONSTRATION PURPOSES ONLY AND         *
 *  IS PROVIDED "AS IS" WITHOUT WARRANTY EITHER EXPRESS OR IMPLIED.      *
 *                                                                       *
 *  Copyright (c) 2002 NorKen Technologies, Inc.                   	 *
 *  All rights reserved.                                                 *
 *                                                                       *
 *************************************************************************/


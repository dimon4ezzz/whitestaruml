##LANGUAGE 'C#'
##TEMPLATE-NAME 'Procedure for reductions'
##ENGINE-NAME 'Parser Base .NET DLL'
##SYSTEM-VERSION '5.0'
##AUTHOR 'Devin Cook with modifications by Janusz Szpilewski' 
##FILE-EXTENSION 'cs'
##NOTES
This template defines a separate procedure for handling reductions and loading
the compiled grammar table file.
##END-NOTES
##ID-CASE Propercase
##ID-SEPARATOR '_'
//Generated by the GOLD Parser Builder

using System.IO;

namespace ParserBase
{

// Generated from template grammar specific data    
##PARAMETERS
public class %Name%ParserBase : GrammarIndependentParserBase
##END-PARAMETERS
{
    protected delegate void ProductionHandler(GOLD.Reduction reduction);
    
    protected enum SymbolIndex
    {
##DELIMITER ','
##SYMBOLS
        @%ID% = %Value%%Delimiter% %Col:50% // %Description%
##END-SYMBOLS
    }

    protected enum ProductionIndex
    {
##PRODUCTIONS
        @%ID% = %Value%%Delimiter% %Col:50% // %Description%
##END-PRODUCTIONS
    }

##PARAMETERS  
} // End of class %Name%ParserBase

// Extensions to %Name%ParserBase to analyze recursively parse tree and call user defined production handlers

public class %Name%ParserWithTreeProcessing : %Name%ParserBase

{
    // Internal management of production handlers
    private ProductionHandler[] m_Handlers = new ProductionHandler[System.Enum.GetNames(typeof(ProductionIndex)).Length];

    private void runHandler(ProductionIndex productionIndex, GOLD.Reduction reduction)
    {
        ProductionHandler handler = m_Handlers[(int)productionIndex];
        if (handler != null)
            handler(reduction);
    }

    // Adds a user defined producttion handler
    protected void AddProductionHandler(ProductionIndex productionIndex, ProductionHandler productionHandler)
    {
        m_Handlers[(int)productionIndex] += productionHandler;
    }

    // Traverses recursively the parse tree and looks for grammar productions
    protected void ProcessParseTree(GOLD.Reduction topLevelNode)
    {
        ProductionIndex productionIndex = (ProductionIndex)topLevelNode.Parent.TableIndex();
        runHandler(productionIndex, topLevelNode);

        // Process child nodes recursively 
        for (int i = 0; i < topLevelNode.Count(); i++)
        {
            if (topLevelNode[i].Type() == GOLD.SymbolType.Nonterminal) // Skip terminals at this level
            {
                ProcessParseTree((GOLD.Reduction)topLevelNode[i].Data);
            }
        }
    }
} // End of class %Name%ParserWithTreeProcessing
##END-PARAMETERS

} // End of namespace ParserBase